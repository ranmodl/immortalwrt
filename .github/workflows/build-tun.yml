name: Build Redmi AX3000 with TUN (Debug Image Stage)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 300
    env:
      CACHE_DIR: "/home/runner/.cache/immortalwrt"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 1

      - name: Free up disk space
        run: |
          # 保留磁盘清理（避免空间不足）
          sudo apt-get autoremove -y && sudo apt-get clean -y
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo rm -rf /var/lib/apt/lists/* /var/cache/apt/*
          mkdir -p $CACHE_DIR && ln -s $CACHE_DIR dl

      - name: Initialize environment
        run: |
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          ./scripts/feeds update -a -q && ./scripts/feeds install -a -q

      - name: Configure firmware (Enable TUN)
        run: |
          make defconfig
          # 核心TUN配置
          echo "CONFIG_KERNEL_TUN=y" >> .config
          echo "CONFIG_KERNEL_TUN_VNET_CROSS_LE=y" >> .config
          echo "CONFIG_PACKAGE_kmod-tun=y" >> .config
          # 禁用冗余功能
          echo "# CONFIG_PACKAGE_luci is not set" >> .config
          echo "# CONFIG_PACKAGE_emortal_autosamba is not set" >> .config
          make defconfig

      - name: Compile core components (No verbose)
        run: |
          # 核心编译（无详细日志，节省空间）
          make -j$(nproc) 2>&1 | tee -a compile-error.log

      - name: Verify image config (Critical check)
        run: |
          # 验证固件生成必需的配置文件是否存在（IPQ50xx关键）
          echo "=== 检查IPQ50xx镜像配置文件 ==="
          IMAGE_CONFIG="target/linux/qualcommax/ipq50xx/image/Makefile"
          if [ ! -f "$IMAGE_CONFIG" ]; then
            echo "ERROR: 镜像配置文件缺失！$IMAGE_CONFIG"
            exit 1
          else
            echo "✅ 镜像配置文件存在"
            # 显示设备列表，确认Redmi AX3000在支持列表中
            grep "DEVICE_" $IMAGE_CONFIG | grep "redmi"
          fi

          # 验证固件生成工具是否存在
          echo -e "\n=== 检查固件生成工具 ==="
          if ! command -v mkimage &> /dev/null; then
            echo "ERROR: mkimage工具缺失（固件生成必需）"
            exit 1
          else
            echo "✅ mkimage工具已安装"
          fi

      - name: Generate firmware (Enable verbose log - Critical!)
        run: |
          # 仅在固件生成阶段启用详细日志，定位失败原因
          echo "=== 开始生成固件（详细日志） ==="
          make image -j1 V=s 2>&1 | tee image-build.log
          # -j1：单线程编译，避免日志混乱；V=s：输出详细错误

      - name: Upload logs and firmware (if exists)
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs-and-firmware
          path: |
            bin/targets/qualcommax/ipq50xx/*.bin
            bin/targets/qualcommax/ipq50xx/*.ubi
            compile-error.log
            image-build.log  # 上传详细的固件生成日志
          retention-days: 30
