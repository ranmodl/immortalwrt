name: Enable TUN in Kernel for Redmi AX3000

on:
  workflow_dispatch:

jobs:
  compile:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    - name: Checkout the exact repository
      uses: actions/checkout@v4
      with:
        repository: kmiit/Redmi_AX3000_immortalwrt
        submodules: true

    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk \
        gettext git libncurses5-dev libssl-dev python3-full python3-dev \
        rsync unzip zlib1g-dev file wget zstd

    - name: Update and install feeds
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configure base system
      run: |
        echo "CONFIG_TARGET_qualcommax=y" > .config
        echo "CONFIG_TARGET_qualcommax_ipq50xx=y" >> .config
        echo "CONFIG_TARGET_qualcommax_ipq50xx_DEVICE_redmi_ax3000=y" >> .config
        make defconfig

    - name: Find and modify the correct kernel config
      run: |
        echo "=== 查找正确的内核配置文件 ==="
        # 查找 qualcommax 架构的配置文件
        KERNEL_CONFIG=$(find target/linux/qualcommax -name "config-6.6" | head -1)
        
        if [ -z "$KERNEL_CONFIG" ]; then
            echo "未找到 qualcommax 的 config-6.6，尝试其他路径"
            KERNEL_CONFIG=$(find target/linux -name "config-6.6" | grep -v ramips | head -1)
        fi
        
        if [ -z "$KERNEL_CONFIG" ]; then
            echo "未找到任何 config-6.6 文件，列出所有配置:"
            find target/linux -name "config-*" | head -10
            exit 1
        fi
        
        echo "使用内核配置文件: $KERNEL_CONFIG"
        
        # 检查文件内容
        echo "=== 原配置文件内容（前10行）==="
        head -10 "$KERNEL_CONFIG" || true
        
        # 检查是否已有 TUN 配置
        echo "=== 现有的 TUN 配置 ==="
        grep "CONFIG_TUN" "$KERNEL_CONFIG" || echo "没有找到 TUN 配置"
        
        # 修改配置（更安全的方法）
        if grep -q "# CONFIG_TUN is not set" "$KERNEL_CONFIG"; then
            echo "修改 TUN 配置..."
            sed -i 's/# CONFIG_TUN is not set/CONFIG_TUN=y/' "$KERNEL_CONFIG"
        else
            echo "添加 TUN 配置..."
            echo "CONFIG_TUN=y" >> "$KERNEL_CONFIG"
        fi
        
        if grep -q "# CONFIG_TUN_VNET_CROSS_LE is not set" "$KERNEL_CONFIG"; then
            sed -i 's/# CONFIG_TUN_VNET_CROSS_LE is not set/CONFIG_TUN_VNET_CROSS_LE=y/' "$KERNEL_CONFIG"
        else
            echo "CONFIG_TUN_VNET_CROSS_LE=y" >> "$KERNEL_CONFIG"
        fi
        
        echo "=== 修改后的 TUN 配置 ==="
        grep "CONFIG_TUN" "$KERNEL_CONFIG" || echo "修改后未找到 TUN 配置"

    - name: Clean and reconfigure
      run: |
        make target/linux/clean
        make defconfig

    - name: Verify the configuration
      run: |
        echo "=== 验证配置 ==="
        # 检查内核配置
        find target/linux -name "config-6.6" -exec grep -l "CONFIG_TUN" {} \; | head -3
        find target/linux -name "config-6.6" -exec grep -h "CONFIG_TUN" {} \; | head -5 || echo "未找到 TUN 配置"

    - name: Download sources
      run: |
        make download -j$(nproc)

    - name: Build toolchain
      run: |
        make toolchain/install -j$(nproc) V=s

    - name: Build kernel
      run: |
        echo "=== 编译内核 ==="
        make target/compile -j$(nproc) V=s 2>&1 | tail -20

    - name: Check build results
      run: |
        echo "=== 检查编译结果 ==="
        find build_dir/ -name "*.ko" | head -5 || echo "未找到内核模块"
        ls -la build_dir/ 2>/dev/null | head -5 || true

    - name: Complete build
      run: |
        echo "=== 完成编译 ==="
        make -j$(nproc) V=s 2>&1 | tail -15

    - name: Prepare artifacts
      run: |
        echo "=== 生成的文件 ==="
        find bin/ -name "*.bin" -o -name "*.itb" -o -name "*.ubi" | head -5 || echo "未找到固件文件"
        find . -name "tun.ko" | head -3 || echo "未找到 tun.ko"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: redmi-ax3000-final
        path: |
          bin/targets/qualcommax/ipq50xx/
        if-no-files-found: warn
