name: Build TUN support for Redmi AX3000

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 240

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: immortalwrt/immortalwrt
        ref: openwrt-24.10
        submodules: true

    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk \
        gettext git libncurses5-dev libssl-dev python3 python3-dev \
        rsync unzip zlib1g-dev file wget

    - name: Configure device and TUN (fixed)
      run: |
        # 1. 清除旧配置（避免残留冲突）
        rm -f .config
        
        # 2. 设备配置（使用ImmortalWrt官方Redmi AX3000定义）
        # 确认设备配置项正确（参考官方设备定义）
        echo "CONFIG_TARGET_qualcommax=y" > .config
        echo "CONFIG_TARGET_qualcommax_ipq50xx=y" >> .config
        echo "CONFIG_TARGET_qualcommax_ipq50xx_DEVICE_xiaomi_redmi-ax3000=y" >> .config  # 修正设备名称
        
        # 3. 强制清理并设置TUN核心配置（解决重复问题）
        # 先删除所有TUN相关配置，再重新写入
        sed -i '/CONFIG_TUN/d' target/linux/generic/config-6.6
        sed -i '/CONFIG_TUN_VNET_CROSS_LE/d' target/linux/generic/config-6.6
        echo "CONFIG_TUN=y" >> target/linux/generic/config-6.6
        echo "CONFIG_TUN_VNET_CROSS_LE=y" >> target/linux/generic/config-6.6
        
        # 4. 在.config中强制声明TUN（确保被编译系统读取）
        echo "CONFIG_KERNEL_TUN=y" >> .config
        echo "CONFIG_KERNEL_TUN_VNET_CROSS_LE=y" >> .config
        
        # 5. 添加基础依赖（解决缺失警告）
        echo "CONFIG_PACKAGE_luci=y" >> .config  # 基础LuCI（可选，解决依赖警告）
        echo "CONFIG_PACKAGE_libpam=y" >> .config
        echo "CONFIG_PACKAGE_lm-sensors=y" >> .config
        
        # 6. 生成配置（保留手动设置）
        make defconfig
        # 再次追加确保配置不被覆盖
        echo "CONFIG_TARGET_qualcommax_ipq50xx_DEVICE_xiaomi_redmi-ax3000=y" >> .config
        echo "CONFIG_KERNEL_TUN=y" >> .config
        make defconfig  # 二次生成确保生效

    - name: Verify critical configurations (fixed)
      run: |
        echo "=== 验证设备型号配置 ==="
        grep "xiaomi_redmi-ax3000" .config || echo "错误：设备型号配置仍未生效！"
        
        echo -e "\n=== 验证TUN配置 ==="
        grep "CONFIG_TUN=y" target/linux/generic/config-6.6 || echo "错误：通用配置TUN未启用！"
        grep "CONFIG_TUN_VNET_CROSS_LE=y" target/linux/generic/config-6.6 || echo "错误：通用配置TUN辅助参数缺失！"
        grep "CONFIG_KERNEL_TUN=y" .config || echo "错误：.config中TUN未启用！"
        
        echo -e "\n=== 显示关键配置片段 ==="
        cat .config | grep -E "TARGET|TUN" | head -30

    - name: Build toolchain
      run: |
        echo "=== 编译工具链 ==="
        make toolchain/install -j$(nproc) V=s 2>&1 | tail -100

    - name: Build kernel with TUN
      run: |
        echo "=== 编译内核 ==="
        make target/compile -j$(nproc) V=s 2>&1 | tail -100

    - name: Build packages
      run: |
        echo "=== 编译软件包 ==="
        make package/compile -j$(nproc) V=s 2>&1 | tail -100

    - name: Install target filesystem
      run: |
        echo "=== 安装目标文件系统 ==="
        make target/install -j$(nproc) V=s 2>&1 | tail -100

    - name: Generate firmware image
      run: |
        echo "=== 生成固件 ==="
        make image -j$(nproc) V=s 2>&1 | tail -200

    - name: Locate firmware
      run: |
        echo "=== 查找固件 ==="
        find bin/targets/ -name "*redmi-ax3000*.bin"
        find bin/targets/ -name "*ipq50xx*.bin"

    - name: Upload firmware
      uses: actions/upload-artifact@v4
      with:
        name: redmi-ax3000-tun-firmware
        path: bin/targets/**/*.bin
        if-no-files-found: error
