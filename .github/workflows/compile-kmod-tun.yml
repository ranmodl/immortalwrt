name: Enable TUN in Kernel for Redmi AX3000

on:
  workflow_dispatch:

jobs:
  compile:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    - name: Checkout the exact repository
      uses: actions/checkout@v4
      with:
        repository: kmiit/Redmi_AX3000_immortalwrt
        submodules: true

    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk \
        gettext git libncurses5-dev libssl-dev python3-full python3-dev \
        rsync unzip zlib1g-dev file wget zstd

    - name: Update and install feeds
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configure base system
      run: |
        echo "CONFIG_TARGET_qualcommax=y" > .config
        echo "CONFIG_TARGET_qualcommax_ipq50xx=y" >> .config
        echo "CONFIG_TARGET_qualcommax_ipq50xx_DEVICE_redmi_ax3000=y" >> .config
        make defconfig

    - name: Manually enable TUN in kernel config
      run: |
        echo "=== 手动启用 TUN 配置 ==="
        # 找到内核配置文件
        KERNEL_CONFIG=$(find . -name "config-*" | grep -E "6\.6" | head -1)
        echo "找到内核配置文件: $KERNEL_CONFIG"
        
        # 备份原配置
        cp "$KERNEL_CONFIG" "${KERNEL_CONFIG}.backup"
        
        # 启用 TUN 支持
        sed -i 's/# CONFIG_TUN is not set/CONFIG_TUN=y/' "$KERNEL_CONFIG"
        sed -i 's/# CONFIG_TUN_VNET_CROSS_LE is not set/CONFIG_TUN_VNET_CROSS_LE=y/' "$KERNEL_CONFIG"
        
        echo "修改后的 TUN 配置:"
        grep "CONFIG_TUN" "$KERNEL_CONFIG"

    - name: Clean and reconfigure
      run: |
        # 清除旧配置，重新配置
        make target/linux/clean
        make defconfig

    - name: Verify TUN configuration
      run: |
        echo "=== 最终配置检查 ==="
        # 检查内核配置
        find . -name "config-*" -exec grep -l "CONFIG_TUN" {} \;
        find . -name "config-*" -exec grep -h "CONFIG_TUN" {} \;
        
        # 检查包配置
        grep -i "tun\|TUN" .config || echo "在 .config 中未找到 TUN 配置"

    - name: Download all sources
      run: make download -j$(nproc)

    - name: Build toolchain
      run: make toolchain/install -j$(nproc) V=s

    - name: Build kernel with TUN support
      run: |
        echo "=== 开始编译内核 ==="
        make target/compile -j$(nproc) V=s
        make package/kernel/linux/compile -j$(nproc) V=s

    - name: Check if TUN module was built
      run: |
        echo "=== 检查是否编译了 TUN 模块 ==="
        find build_dir/ -name "*.ko" | grep -i tun || echo "未找到 TUN 模块"
        find build_dir/ -name "tun.ko" || echo "未找到 tun.ko"

    - name: Build complete firmware
      run: |
        echo "=== 编译完整固件 ==="
        make -j$(nproc) V=s 2>&1 | tail -50

    - name: Find and upload artifacts
      run: |
        echo "=== 生成的文件 ==="
        find bin/ -name "*.bin" -o -name "*.itb" -o -name "*.ubi" | head -10
        find build_dir/ -name "tun.ko" || echo "tun.ko 未找到"

        # 如果找到了 tun.ko，单独打包
        if find build_dir/ -name "tun.ko" | grep -q .; then
          echo "找到 TUN 模块，单独提取"
          find build_dir/ -name "tun.ko" -exec cp {} . \;
        fi

    - name: Upload firmware and modules
      uses: actions/upload-artifact@v4
      with:
        name: firmware-with-tun
        path: |
          bin/targets/qualcommax/ipq50xx/*.bin
          bin/targets/qualcommax/ipq50xx/*.itb
          bin/targets/qualcommax/ipq50xx/*.ubi
          tun.ko
        if-no-files-found: ignore
