name: Build Redmi AX3000 with TUN Support

on:
  workflow_dispatch:
    inputs:
      device_model:
        description: 'Device model (leave default for Redmi AX3000)'
        required: true
        default: 'xiaomi_redmi-ax3000'
      kernel_version:
        description: 'Kernel version'
        required: true
        default: '6.6'

jobs:
  build-firmware:
    runs-on: ubuntu-latest
    timeout-minutes: 300
    environment: build

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          repository: immortalwrt/immortalwrt
          ref: openwrt-24.10
          submodules: 'recursive'
          fetch-depth: 1

      - name: Update submodules (critical fix)
        run: |
          git submodule update --init --recursive
          if [ ! -f "target/linux/qualcommax/ipq50xx/config-6.6" ]; then
            echo "Error: IPQ50xx config file missing!"
            exit 1
          fi

      - name: Initial environment setup
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            build-essential clang flex bison g++ gawk gettext git \
            libncurses5-dev libssl-dev python3 python3-dev rsync \
            unzip zlib1g-dev file wget curl nano tree

          # 更新 feeds 拉取依赖
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          echo "DEVICE_MODEL=${{ github.event.inputs.device_model }}" >> $GITHUB_ENV
          echo "KERNEL_VERSION=${{ github.event.inputs.kernel_version }}" >> $GITHUB_ENV
          echo "TARGET_DIR=target/linux/qualcommax/ipq50xx" >> $GITHUB_ENV

      - name: Load official device configuration
        run: |
          rm -f .config  # 清除旧配置
          make defconfig TARGET=qualcommax SUBTARGET=ipq50xx

          # 验证基础配置
          if ! grep -q "CONFIG_TARGET_qualcommax_ipq50xx=y" .config; then
            echo "Error: Failed to load base IPQ50xx configuration"
            tree target/linux/qualcommax/ipq50xx/  # 调试输出
            exit 1
          fi

      - name: Configure specific device and TUN
        run: |
          echo "CONFIG_TARGET_qualcommax_ipq50xx_DEVICE_${{ env.DEVICE_MODEL }}=y" >> .config

          # TUN 配置
          echo "CONFIG_KERNEL_TUN=y" >> .config
          echo "CONFIG_KERNEL_TUN_VNET_CROSS_LE=y" >> .config
          sed -i '/^#*CONFIG_TUN/d' target/linux/generic/config-${{ env.KERNEL_VERSION }}
          sed -i '/^#*CONFIG_TUN_VNET_CROSS_LE/d' target/linux/generic/config-${{ env.KERNEL_VERSION }}
          echo "CONFIG_TUN=y" >> target/linux/generic/config-${{ env.KERNEL_VERSION }}
          echo "CONFIG_TUN_VNET_CROSS_LE=y" >> target/linux/generic/config-${{ env.KERNEL_VERSION }}

          # 禁用不必要包减少警告
          echo "# CONFIG_PACKAGE_emortal_autosamba is not set" >> .config
          echo "# CONFIG_PACKAGE_pcat-manager is not set" >> .config

          # 启用必要依赖
          echo "CONFIG_PACKAGE_luci=y" >> .config
          echo "CONFIG_PACKAGE_luci-base=y" >> .config

          make defconfig

          # 锁定关键配置
          echo "CONFIG_TARGET_qualcommax_ipq50xx_DEVICE_${{ env.DEVICE_MODEL }}=y" >> .config
          echo "CONFIG_KERNEL_TUN=y" >> .config
          make defconfig

      - name: Critical configuration verification
        run: |
          # 验证设备配置
          if grep -q "CONFIG_TARGET_qualcommax_ipq50xx_DEVICE_${{ env.DEVICE_MODEL }}=y" .config; then
            echo "✅ Device configuration verified"
          else
            echo "❌ Device configuration missing"
            exit 1
          fi

          # 验证 TUN 配置
          if grep -q "CONFIG_KERNEL_TUN=y" .config && grep -q "CONFIG_TUN=y" target/linux/generic/config-${{ env.KERNEL_VERSION }}; then
            echo "✅ TUN configuration verified"
          else
            echo "❌ TUN configuration missing"
            exit 1
          fi

      - name: Build toolchain
        run: |
          make toolchain/install -j$(nproc) V=s 2>&1 | tee toolchain-build.log

      - name: Build kernel
        run: |
          make target/compile -j$(nproc) V=s 2>&1 | tee kernel-build.log
          KERNEL_CONFIG=$(find build_dir/ -path "*/linux-*${{ env.KERNEL_VERSION }}*/.config" | head -1)
          if grep -q "CONFIG_TUN=y" "$KERNEL_CONFIG"; then
            echo "✅ TUN enabled in kernel"
          else
            echo "❌ TUN missing in kernel"
            exit 1
          fi

      - name: Build packages
        run: |
          make package/compile -j$(nproc) V=s 2>&1 | tee package-build.log

      - name: Install target filesystem
        run: |
          make target/install -j$(nproc) V=s 2>&1 | tee filesystem-install.log

      - name: Generate firmware images
        run: |
          make image -j$(nproc) V=s 2>&1 | tee firmware-generate.log
          FIRMWARE_DIR="bin/targets/qualcommax/ipq50xx"
          if [ -d "$FIRMWARE_DIR" ]; then
            FIRMWARE_FILE=$(find "$FIRMWARE_DIR" -name "*${{ env.DEVICE_MODEL }}*.bin" | grep -v "factory" | head -1)
            if [ -n "$FIRMWARE_FILE" ]; then
              echo "✅ Firmware: $FIRMWARE_FILE"
              echo "FIRMWARE_FILE=$FIRMWARE_FILE" >> $GITHUB_ENV
            else
              echo "❌ No firmware found"
              exit 1
            fi
          else
            echo "❌ Firmware directory missing"
            exit 1
          fi

      - name: Upload firmware and logs
        uses: actions/upload-artifact@v4
        with:
          name: redmi-ax3000-firmware
          path: |
            ${{ env.FIRMWARE_FILE }}
            *.log
            bin/targets/qualcommax/ipq50xx/*.bin
